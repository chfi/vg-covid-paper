* File formats
While the main format used by the *tool* ~vg~ is a protobuf schema,
serialized to file and stored in ~.vg~ files, there's nothing special
about that format, and there are other formats used to represent
variation graphs.

A good entry is GFA, Graphical Fragment Assembly, as it is used as a
sort of lingua franca across VG implementations, and the ~.vg~ format
is equivalent to a subset of GFA1. The proposed 2nd version of the
standard, GFA2, is intended to support expressing an assembly graph in
a range of levels of detail, from just the graph topology down to the
aligned reads that induce each sequence. This is in addition to
supporting variation graphs in general (and some other facets, omitted
here). However, GFA1

Another important format is ~.xg~, which is a graph index format. It
contains the structure of a variation graph, and the paths that define
the graph, but not its sequences. This allows for faster and cheaper
graph operations, such as retrieving the distance between a pair of
nodes, finding adjacent nodes, or the degree of a node.

GAM, Graph Alignment Map, is the VG version of BAM, and contains the
information necessary to know where a sequence (e.g. a read) is mapped
to in the graph. Like ~.vg~ files, ~.gam~ contain a binary and compressed
representation that can be viewed by ~vg view~. However, there is also
a JSON representation of GAM.

** Some terminology

- reference graph - a graph containing a reference genome and
  variation in terms of that ref genome
- flat graph - a graph containing only a reference genome
- augmented graph - a graph with reads mapped to it, and the paths
  induced by those reads inserted into the graph
- sample graph - a variation graph with variations from one or more
  samples


* GFA

Since, as noted above, GFA is a common language for describing graphs,
across VG implementations, it appears to be a good starting place.
There are many more GFA1 implementations than GFA2, but while the GFA2
spec is still considered a proposal, it hasn't changed much in the
past three years (according to its git history).

The specs are available on github, but I'll be focusing on GFA1:

- [[https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md][GFA1 spec]]
- [[https://github.com/GFA-spec/GFA-spec/blob/master/GFA2.md][GFA2 spec]]
- also useful: https://github.com/lh3/gfatools/blob/master/doc/rGFA.md

** Background
GFA was developed by Heng Li, and first described in a couple of blog posts:
- https://lh3.github.io/2014/07/19/a-proposal-of-the-grapical-fragment-assembly-format
- https://lh3.github.io/2014/07/23/first-update-on-gfa

As the name suggests, GFA is intended to represent assembly graphs, or
sequence graphs where the nodes are sequences, and the edges are
overlaps between sequences. These graphs are *bidirected*, meaning not
only do edges have direction, but each *end* of an edge has its own
direction. In a bidirected graph, there are three kinds of edges, by
direction -- both ends point out, both ends point in, or one of the
ends points out and the other in. In the context of sequence graphs,
this bidirectionality stems from the orientation of sequences.

GFA represents these bidirected graphs as links between segments,
where each link points from the *end* of one segment to the
*beginning* of the other segment, and has an orientation for each of
the segments. Each link also stores how many basepairs of the two
segments overlap.

** GFA1
GFA is a tab-delimited format, where each line describes one piece of
data. The first field of each line denotes the type of data the line
contains, and in turn the fields that the rest of the line contains.
The required fields follow the type of the line, and optional fields
follow the required fields.

Path and segment records have unique names, and share a namespace.
A name is a printable ASCII string not including whitespace, the
substrings ~+,~ or ~-,~, and cannot start with ~*~ or ~=~.

*** Optional fields
Optional fields have the format ~TAG:TYPE:VALUE~, where ~TAG~ is
a 2-char string matching the regex ~/[A-Za-z][A-Za-z0-9]/~, i.e.
an alphabetic char followed by an alphanumeric char. Each tag
can only appear once in a given line, and tags with lowercase
letters are reserved for end users. The ~TYPE~ is one of the
characters in the table below, and define what ~VALUE~ can be.
See the GFA1 spec for the regex for each type.

| Type  | Description                    |
|-------+--------------------------------|
| A     | Printable char                 |
| i     | Signed int                     |
| f     | Single-precision float         |
| Z     | Printable string               |
| J     | JSON excluding newline and tab |
| H     | Hex-formatted byte array       |
| B     | Array of ints or floats        |

*** Line types

| Type | Description |
|------+-------------|
| #    | Comment     |
| H    | Header      |
| S    | Segment     |
| L    | Link        |
| C    | Containment |
| P    | Path        |

**** Comments
Lines starting with # are ignored

**** Header line
The header line has no required fields, and only one optional field,
VN:Z, which is a version number (of the data, presumably). The spec
doesn't say anything about whether a header line is required, or
whether there can be more than one, but presumably there ought to be
one, and only one, per .gfa file.

**** Segment
Segment lines describe the segments in the graph, i.e. the nodes.
Each segment has a required name, and a nucleotide sequence; however
the sequence can be set to ~*~, which says that the sequence is not
specified in the GFA file. The sequence can be stored in a FASTA
file, in which case a URI or path to the file is given in the optional
field UR:Z.

It's not clear to me, if the sequence is in an external file, how
the sequence is located in the file. Is it assumed that the segment
name is the sequence ID in the file? Doesn't really matter now.

**** Link
Links describe connections between segments; segments are oriented, so
each link contains not only the identifiers of the From- and
To-segments, but the orientation of them. The overlap of the two
segments is also specified, as a CIGAR string. If the overlap is ~*~,
it is treated as unspecified, and an overlap of ~0M~ means the 2nd
segment follows immediately after the 1st.

**** Containment
A containment represents an overlap between two segments where one
segment is completely contained in the other. It contains essentially
the same information as a link, with the addition of the index where
the contained segment begins in the container.

**** Path
A path describes a genome in the graph, as a list of segments and
their orientation.

* Handlegraph

https://pangenome.github.io/handlegraph/index.html

The idea of the Handle Graph abstraction is to represent the graph in
such a way that their basic elements are easily, precisely, and
efficiently addressable. Since these graphs are bidirected, it's not
enough to have a reference to just a node containing a sequence, you
also need a direction - a "handle" is a reference to a single strand,
or direction, of a node. In a way, semantically, a node is a pair of
complementary handles.

| C++ name      | type       | description                                                                                     |
|---------------+------------+-------------------------------------------------------------------------------------------------|
| handle_t      | 64-bit ID  | an oriented traversal of a node                                                                 |
| id_t          | u64        | a node identifier                                                                               |
| edge_t        | handle_t^2 | a pair of handle_ts, where the edge is directed from the first member of the pair to the second |
| path_handle_t | 64-bit ID  | a reference to a path                                                                           |
| step_handle_t | 128-bit ID | a reference to a single step of a path on one node traversal                                    |

These types are opaque, in the sense that their internal
representation as 64-bit types do not directly correspond to any
external identifiers from the data used to construct the graph.

** HashGraph
[2020-04-05 Sun 16:40]

These are some notes to aid my understanding in the HashGraph
implementation of the HandleGraph, as part of my Rust implementation
of the same. Most camel cased names are C++ classes from libbdsg
and libhandlegraph.

HashGraph is a MutablePathDeletableHandleGraph, and a
SerializableHandleGraph. The former denotes a graph that's both a
MutablePathMutableHandleGraph, and a DeletableHandleGraph; the former
of those again is a MutablePathHandleGraph and a MutableHandleGraph.

MutableHandleGraph extends HandleGraph, MutablePathHandleGraph extends
PathHandleGraph. PathHandleGraph extends HandleGraph.

That's a lot of words, but in reality the relationship is relatively
simple despite multiple inheritance.

The base class is HandleGraph (henceforth HG); HG on its own doesn't
store paths. PathHG extends HG with support for embedding paths.

MutablePathHG extends PathHG with methods for creating, destroying,
and modifying the paths embedded in the graph.

MutableHG extends HG with methods for creating handles and edges in
the graph, as well as other stuff like modifying node orientation,
splitting handles, optimizing the graph and reordering the internal
structure, and modifying node IDs.

DeletableHG adds destructive methods on top of MutableHG, allowing
destruction of handles and edges, and removing all nodes and edges
in the graph.

MutablePathMutableHG doesn't add any methods, and simply implies that
both the embedded paths and the graph are mutated, along with stricter
semantics on a few methods so that the product makes sense.

Likewise, MutablePathDeletableHG adds no methods, but is the product
of MutablePathMutableHG and DeletableHG. The added semantics is that
clearing the graph also deletes all paths.

** Rust implementation notes



*** C++
It looks like it'll be far from straightforward to write a library
that can easily slot into the libhandlegraph API, as libhandlegraph
relies on C++ features in the interface. Rust's bindgen can generate
bindings for C++ features, though it's apparently considerably clunky.
However I'm not sure in what way that applies to writing a library
that fulfills a C++ API from Rust.

One way to do it might be to have a C API or wrapper for
libhandlegraph, though I don't know enough about these things to say
what that would look like, how much work it'd be, or if it's even
viable. [update 4/6/20 - the Rust implementation will exist in parallel
to the C++ ecosystem; interop is a future problem if we ever decide
on it being worthwhile]

Some resources:
- https://hsivonen.fi/modern-cpp-in-rust/
- https://github.com/crackcomm/rust-lang-interop
- https://rust-lang.github.io/rust-bindgen/cpp.html
- https://crates.io/crates/cpp

*** Rust HandleGraph & HashGraph

As this won't be slotting into the C++ ecosystem, I don't have to
stick directly to the HandleGraph API, however I'll start with a more
or less one-to-one mapping from the C++ implementation. Once I have a
functional base, I can move bits and pieces over into more idiomatic
Rust as appropriate.

One interesting factor which makes things easier (it might come back
to bite me in the future, but I don't think it will) is that most of
the types, such as the node IDs and handles, are represented as
newtypes over u64. Since u64 is Copy, we can derive Copy for these
types, i.e. since these types take up the same space as a pointer,
there's no performance loss in copying one of these values to where
it's used vs using a reference to it. As long as you're not mutating
a given value, you don't have to worry about moving vs borrowing it.

So far there's not much to say about the implementation. I'm using
the Rust stdlib HashMap as a basis, and letting rustc derive the hash
trait for the types as needed; if necessary, they can be customized
later. I've been moving some methods from the HandleGraph trait
to the Handle type where it makes sense, and I'll likely simplify
the interface further. I've implemented functions for creating
handles and edges, and they're essentially line-by-line translations
from the C++ version.
